
import React, { useState, useEffect } from "react";
import { Course } from "@/entities/Course";
import { Enrollment } from "@/entities/Enrollment";
import { Assignment } from "@/entities/Assignment";
import { Submission } from "@/entities/Submission";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { BookOpen, Clock, Award, AlertCircle, Play, CheckCircle } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";

export default function StudentDashboard({ user }) {
  const [enrollments, setEnrollments] = useState([]);
  const [assignments, setAssignments] = useState([]);
  const [submissions, setSubmissions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        const [enrollmentData, assignmentData, submissionData] = await Promise.all([
          Enrollment.filter({ student_id: user.id }),
          Assignment.list(),
          Submission.filter({ student_id: user.id })
        ]);

        setEnrollments(enrollmentData);
        setAssignments(assignmentData);
        setSubmissions(submissionData);
      } catch (error) {
        console.error("Error loading dashboard data:", error);
      }
      setLoading(false);
    };

    if (user?.id) {
      loadDashboardData();
    }
  }, [user?.id]);

  const getUpcomingAssignments = () => {
    const enrolledCourseIds = enrollments.map(e => e.course_id);
    const submittedAssignmentIds = submissions.map(s => s.assignment_id);
    
    return assignments
      .filter(a => enrolledCourseIds.includes(a.course_id) && !submittedAssignmentIds.includes(a.id))
      .filter(a => new Date(a.due_date) > new Date())
      .sort((a, b) => new Date(a.due_date) - new Date(b.due_date))
      .slice(0, 5);
  };

  const calculateOverallProgress = () => {
    if (enrollments.length === 0) return 0;
    const totalProgress = enrollments.reduce((sum, e) => sum + e.progress, 0);
    return Math.round(totalProgress / enrollments.length);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="space-y-8">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="bg-gradient-to-br from-blue-500 to-blue-600 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100 text-sm font-medium">Enrolled Courses</p>
                <p className="text-3xl font-bold">{enrollments.length}</p>
              </div>
              <BookOpen className="w-8 h-8 text-blue-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-500 to-orange-600 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-orange-100 text-sm font-medium">Overall Progress</p>
                <p className="text-3xl font-bold">{calculateOverallProgress()}%</p>
              </div>
              <Award className="w-8 h-8 text-orange-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500 to-green-600 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100 text-sm font-medium">Completed</p>
                <p className="text-3xl font-bold">
                  {enrollments.filter(e => e.status === 'completed').length}
                </p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-200" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-red-500 to-red-600 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-100 text-sm font-medium">Due Soon</p>
                <p className="text-3xl font-bold">{getUpcomingAssignments().length}</p>
              </div>
              <Clock className="w-8 h-8 text-red-200" />
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Current Courses */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Play className="w-5 h-5 text-blue-500" />
              Continue Learning
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {enrollments.slice(0, 3).map((enrollment) => (
                <div key={enrollment.id} className="p-4 border rounded-xl">
                  <div className="flex justify-between items-start mb-3">
                    <div>
                      <h4 className="font-semibold">Course {enrollment.course_id}</h4>
                      <Badge variant="outline" className="mt-1">
                        {enrollment.status}
                      </Badge>
                    </div>
                    <Button size="sm" variant="outline" asChild>
                      <Link to={createPageUrl(`Course?id=${enrollment.course_id}`)}>
                        Continue
                      </Link>
                    </Button>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Progress</span>
                      <span>{enrollment.progress}%</span>
                    </div>
                    <Progress value={enrollment.progress} className="h-2" />
                  </div>
                </div>
              ))}
              {enrollments.length === 0 && (
                <div className="text-center py-8">
                  <BookOpen className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">No enrolled courses yet</p>
                  <Button asChild className="mt-4">
                    <Link to={createPageUrl("Courses")}>Browse Courses</Link>
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Upcoming Assignments */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-orange-500" />
              Upcoming Assignments
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {getUpcomingAssignments().map((assignment) => (
                <div key={assignment.id} className="p-4 border rounded-xl">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h4 className="font-semibold">{assignment.title}</h4>
                      <p className="text-sm text-gray-600 mt-1">
                        Due: {format(new Date(assignment.due_date), "MMM d, yyyy 'at' h:mm a")}
                      </p>
                      <Badge variant="outline" className="mt-2 capitalize">
                        {assignment.type}
                      </Badge>
                    </div>
                    <Button size="sm" asChild>
                      <Link to={createPageUrl(`Assignment?id=${assignment.id}`)}>
                        Start
                      </Link>
                    </Button>
                  </div>
                </div>
              ))}
              {getUpcomingAssignments().length === 0 && (
                <div className="text-center py-8">
                  <CheckCircle className="w-12 h-12 text-green-400 mx-auto mb-4" />
                  <p className="text-gray-500">No upcoming assignments</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
